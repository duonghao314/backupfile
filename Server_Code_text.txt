using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
using System.IO.Ports;
using System.Xml;
using System.IO.Compression;
namespace Server
{

    public partial class Server : Form
    {        
        public delegate void Updatepgdstatus(int s, int p);
        public delegate void UpdateListBoxCallBack(string s);
        public delegate void UpdateLabelCallBack(string s);
        private NetworkStream nwkStream = null;
        private Stream stmReader = null;
        private Stream stmWriter = null;
        private Socket socketForClient = null;
        private TcpListener tcpListener = null;
        IPEndPoint Ipe;
        Socket server;
        List<Socket> ClientList;
        NetworkStream ns;
        StreamReader sr;
        StreamWriter sw;
        Socket Client;
        Thread t;
        string myIP = "";
        Random ran ;
        public static string CMAC= "null";
        string Client_Mac;
        string key;

        string MPort;
        string InputData = String.Empty;
        delegate void SetTextCallback(string text);
        int AutoCount = 0;
        public Server()
        {
            InitializeComponent();
            CheckForIllegalCrossThreadCalls = false;
            serialPort1.DataReceived += new SerialDataReceivedEventHandler(DataReceive);
            string[] BaudRate = { "1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200" };
            //comboBox2.Items.AddRange(BaudRate);
            radioButton1.CheckedChanged += new EventHandler(Radio_show_CheckedChanged);
            radioButton2.CheckedChanged += new EventHandler(Radio_show_CheckedChanged);
            radioButton3.CheckedChanged += new EventHandler(Radio_show_CheckedChanged);
            radioButton1.Visible = false;
            radioButton2.Visible = false;
            radioButton3.Visible = false;
            button2.Visible = false;
            button1.Visible = false;
            Connect();
            label3.Text = "Chua backup l?n nào";
            label7.Text = "Ch?n thu m?c backup";
            label5.Text = "Ngu?i dùng: Guest";
            label8.Text = "Client's MAC:" + CMAC;
        }
        private void Radio_show_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton radioButton = sender as RadioButton;
            if (radioButton.Checked == true)
            { 
                switch (radioButton.Name)
                {
                    case "radioButton1":
                        timer2.Interval = 60000;
                        if (!timer2.Enabled)
                        {
                            timer2.Start();
                        }
                        
                        MessageBox.Show("Thi?t l?p auto backup m?i 60s");
                        break;
                    case "radioButton2":
                        timer2.Interval = 120000;
                        if (!timer2.Enabled)
                        {
                            timer2.Start();
                        }
                        MessageBox.Show("Thi?t l?p auto backup m?i 2p");
                        break;
                    case "radioButton3":
                        timer2.Interval = 300000;
                        if (!timer2.Enabled)
                        {
                            timer2.Start();
                        }
                        MessageBox.Show("Thi?t l?p auto backup m?i 5p");
                        break;
                }
            }
        }

        private void Server_FormClosed(object sender, FormClosingEventArgs e)
        {
            DialogResult dlr = MessageBox.Show("B?n mu?n thoát chuong trình?",
     "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        	if (dlr == DialogResult.Yes) 
            {e.Cancel = false;           
                Close();}
        	else e.Cancel=true;
        }
        private void button4_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog path = new FolderBrowserDialog();
            path.ShowNewFolderButton = false;
            path.Description = "M?i ch?n thu m?c d? backup";
            if (path.ShowDialog() == DialogResult.OK)
            {
                label7.Text = path.SelectedPath;
            }
        }

        void Connect()
        {
            ran = new Random();
            MPort = 3000.ToString();
            ClientList = new List<Socket>();
            IPHostEntry host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (IPAddress Address in host.AddressList)
            {
                if (Address.AddressFamily.ToString() == "InterNetwork")
                {
                    myIP = Address.ToString();
                }

            }
            Ipe = new IPEndPoint(IPAddress.Parse(myIP),int.Parse(MPort));
            server = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            server.Bind(Ipe);
        }
        void Close()
        {
            server.Close();
        }

        void Send(Socket Client)
        {
            Client.Send(Serialize(Check_Mac()));
        }

        void Receive(object obj)
        {
            Client = obj as Socket;
            try
            {
                byte[] data = new byte[1024 * 5000];
                Client.Receive(data);
                string message = (string)Deserialize(data);
                //label2.Text = message + "xxxx";
                Client_Mac = message;
            }
            catch (Exception)
            {
                Close();
            }

        }

        byte[] Serialize(object obj)
        {
            MemoryStream stream = new MemoryStream();
            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Serialize(stream, obj);
            return stream.ToArray();
        }

        object Deserialize(byte[] data)
        {
            MemoryStream stream = new MemoryStream(data);
            BinaryFormatter formatter = new BinaryFormatter();

            return formatter.Deserialize(stream);
        }

        public string Check_Mac()
        {
            if (string.Compare(CMAC, Client_Mac, true) == 0)
                key = "1";
            else
                key = "0";
            return key;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (!Password.stt)
            {
                Password pf = new Password();
                pf.ShowDialog(this);
            }
            
            String username = "Guest";
            if (Password.stt) {
                username = Password.username;
                CMAC = textBox2.Text.Trim();
            }
            
            label5.Text = "Ngu?i dùng: " + username;
            label8.Text = "Client's MAC: " + CMAC;
            
            Thread Listen = new Thread(() =>
            {
                try
                {
                    while (true)
                    {
                        server.Listen(100);
                        Client = server.Accept();
                        ClientList.Add(Client);
                        NetworkStream ns = new NetworkStream(Client);
                        sr = new StreamReader(ns);
                        sw = new StreamWriter(ns);

                        Thread Recv = new Thread(Receive);
                        Recv.IsBackground = true;
                        Recv.Start(Client);
                        Receive(Client);
                        Send(Client);
                                          
                    }
                }                   
                catch
                {
                    Ipe = new IPEndPoint(IPAddress.Any, int.Parse(MPort));
                    server = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP);
                    ns = new NetworkStream(Client);
                }
            });
            Listen.IsBackground = true;
            Listen.Start();
            IP.Text = "IP Server: " + myIP;
            Port.Text ="Port: " + MPort;
            
            textBox2.Visible = false;
            label6.Visible = false;
        }

        void Main_Process()
        {
            label1.Text = "Server send file: ";
            string line = label7.Text;

            string filepath = label7.Text+"\\log.txt";
            FileStream fs = new FileStream(filepath, FileMode.Create);       
            StreamWriter sWriter = new StreamWriter(fs, Encoding.UTF8);
            string[] folder = System.IO.Directory.GetFiles(line);
            DayOfWeek dayweek = DateTime.Now.DayOfWeek;
            int day = DateTime.Now.Day;
            int month = DateTime.Now.Month;
            int year = DateTime.Now.Year;
            int hour = DateTime.Now.Hour;
            int minute = DateTime.Now.Minute;
            int second = DateTime.Now.Second;
            sWriter.WriteLine("TH?I GIAN BACKUP: " + dayweek + ", " + day + "/" + month + "/" + year + "  " + hour + ":" + minute + ":" + second);
            sWriter.WriteLine("Ngu?i dùng: " + Password.username);
            int dem = 0;
            foreach (string fileName in folder)
            {
                dem++;
                sWriter.WriteLine(dem + "/ " + Path.GetFileName(fileName).Trim() + "\n");
            }
            sWriter.Flush();
            fs.Close();

            string zip ="D:\\backup_" + day + "" + month + "" + year + "_" + hour + "h" + minute + "m" + second + "s" + ".zip";
            ZipFile.CreateFromDirectory(line, zip);
            lbLink.Text = zip;
            tbLink.Text = zip;

            t = new Thread(new ThreadStart(Send_File));
            t.Start();
        }
        private void Send_File()
        {
            long sendTime = 0;    
            try
            {
                set("Listening");
                IPEndPoint ip = new IPEndPoint(IPAddress.Any,Convert.ToInt32(2222));
                tcpListener = new TcpListener(ip);
                tcpListener.Start();
                socketForClient = tcpListener.AcceptSocket();
                if (socketForClient.Connected)
                {
                    NetworkStream ns1 = new NetworkStream(socketForClient);
                    StreamReader sr1 = new StreamReader(ns1);
                    StreamWriter sw1 = new StreamWriter(ns1);
                    string filename = lbLink.Text;
                    nwkStream = new NetworkStream(socketForClient);
                    stmReader = File.OpenRead(tbLink.Text);
                    stmWriter = nwkStream;
                    FileInfo flInfo = new FileInfo(tbLink.Text);
                    int size = Convert.ToInt32(flInfo.Length);
                    size = size;
                    byte[] buff = new byte[8192];
                    int len = 0;
                    int progress = 0;
                    set("Starting");
                    long timeStart = DateTime.Now.Ticks;
                    sw1.WriteLine(filename);
                    sw1.Flush();
                    while ((len = stmReader.Read(buff, 0, 8192)) != 0)
                    {
                        progress += len;
                        float progressMB = progress / (1024*1024);
                        float sizeMB = size / (1024*1024);
                        set2(size, progress);
                        set(progressMB.ToString("0.00") + " MB of " + sizeMB.ToString("0.00") + " MB");
                        stmWriter.Write(buff, 0, len);
                        stmWriter.Flush();
                    }
                    long timeStop = DateTime.Now.Ticks;
                    sendTime = (timeStop - timeStart) / TimeSpan.TicksPerSecond;
                    
                }
                
                set("Th?i gian g?i: "+ sendTime +"s");

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.ToString());
            }
            finally
            {
                if (socketForClient != null)
                {
                    socketForClient.Close();
                    nwkStream.Close();
                    stmWriter.Close();
                    stmReader.Close();
                    tcpListener.Stop();
                }
            }
        }
 
        void Button2Click(object sender, EventArgs e)
        {
            if (!serialPort1.IsOpen)
            {
                //serialPort1.PortName = comboBox1.Text;
                //serialPort1.BaudRate = Convert.ToInt32(comboBox2.Text);
               // serialPort1.Open();
            }
            
        }
        
        void Button1Click(object sender, EventArgs e)
        {
        	serialPort1.Close();
        }
        
        void ServerLoad(object sender, EventArgs e)
        {
 			//comboBox1.DataSource = SerialPort.GetPortNames();
            //comboBox2.SelectedIndex = 3;        	
        }
        void Timer1Tick(object sender, System.EventArgs e)
        {
            if (Client_Mac == CMAC)
            {
                label4.Text = "Client dã k?t n?i";
                radioButton1.Visible = true;
                radioButton2.Visible = true;
                radioButton3.Visible = true;
                btn3.Visible = true;
            } else
            {
                label4.Text = "Client chua k?t n?i";
                radioButton1.Visible = false;
                radioButton2.Visible = false;
                radioButton3.Visible = false;
                btn3.Visible = false;
                timer2.Stop();
            }
            if (!serialPort1.IsOpen)
            {
                //label5.Text = ("MCU chua k?t n?i");
            }
            else if (serialPort1.IsOpen)
            {

                //label5.Text = ("MCU dã k?t n?i");

            }
            if (serialPort1.IsOpen)
            {
                button1.Visible = false;
                button2.Visible = false;
            } else
            {
                button1.Visible = false;
                button2.Visible = false;
            }
        }
        private void timer2_Tick(object sender, EventArgs e)
        {
            if (label7.Text == "Ch?n thu m?c backup")
            {
                MessageBox.Show("Chua ch?n thu m?c. Vui lòng ch?n thu m?c", "ERROR!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                try
                {
                    Main_Process();
                    AutoCount++;
                    label3.Text = "Ðã backup " + AutoCount + " l?n";
                }
                finally
                {
                    Close();
                }
            }      
        }
        private void DataReceive(object obj, SerialDataReceivedEventArgs e)
        {
            InputData = serialPort1.ReadExisting();
            if (InputData != String.Empty)
            {	
            	if(InputData=="0") SetText("D?ng ");
            	else if(InputData=="1")
                {
                    if (label7.Text== "Ch?n thu m?c backup")
                    {
                        MessageBox.Show("Chua ch?n thu m?c. Vui lòng ch?n thu m?c", "ERROR!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    } else
                    {
                        try
                        {
                            SetText("G?i ");
                            Thread main = new Thread(new ThreadStart(Main_Process));
                            main.Priority = ThreadPriority.Highest;
                            main.Start();
                        }
                        finally
                        {
                            serialPort1.Close();
                            Close();
                        }
                    }
                    
                }
            }
        }

        private void SetText(string text)
        {
            if (this.textBox1.InvokeRequired)
            {
                SetTextCallback d = new SetTextCallback(SetText);
                this.Invoke(d, new object[] { text });
            }
            else {
            	this.textBox1.Text += text;
            	if(text=="0") label4.Text="D?ng ";
                if(text=="1") label4.Text="G?i ";
            }
        }

        private void OnUpdateLabel(String s)
        {
            lbProgressbar.Text = s;
        }
        void set(string s)
        {
            if (InvokeRequired)
            {
                object[] pList = { s };
                lbProgressbar.BeginInvoke(new UpdateListBoxCallBack(OnUpdateLabel), pList);
            }
            else
            {
                OnUpdateLabel(s);
            }
        }
        void set2(int s, int p)
        {
            if (InvokeRequired)
            {
                object[] pList = { s, p };
                pgbStatus.BeginInvoke(new Updatepgdstatus(OnUpdatepgdstatus), pList);
            }
            else
            {
                OnUpdatepgdstatus(s, p);
            }
        }
        private void OnUpdatepgdstatus(int s, int p)
        {
            pgbStatus.Maximum = s;
            pgbStatus.Value = p;
        }

        

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void pgbStatus_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {

        }

        

        private void btn3_Click(object sender, EventArgs e)
        {
            Thread main = new Thread(new ThreadStart(Main_Process));
            main.Priority = ThreadPriority.Highest;
            main.Start();
        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            
        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click_1(object sender, EventArgs e)
        {
            Application.Restart();
        }
    }
}
